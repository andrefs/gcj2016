#!/usr/bin/env perl 

#PODNAME: cenas.pl

use strict; use warnings;
use Data::Dump qw/dump/;
use feature qw/say/;
use Convert::AnyBase;

my $b = {
    2  => Convert::AnyBase->new(set => '01'),
    3  => Convert::AnyBase->new(set => '012'),
    4  => Convert::AnyBase->new(set => '0123'),
    5  => Convert::AnyBase->new(set => '01234'),
    6  => Convert::AnyBase->new(set => '012345'),
    7  => Convert::AnyBase->new(set => '0123456'),
    8  => Convert::AnyBase->new(set => '01234567'),
    9  => Convert::AnyBase->new(set => '012345678'),
    10 => Convert::AnyBase->new(set => '0123456789'),
};

my $T = <>;

for(my $t=1; $t<=$T; $t++){
    my ($N, $J) = split /\s+/, <>;
    case($N, $J);
}

sub case {
    my ($N, $J) = @_;
    my $max = $b->{2}->decode('1'x($N-2));
    my $blockers = blockers();

    say 'Case #1:';
    my $min_b = $blockers->[-1];
    $min_b =~ s/^.//;
    $min_b =~ s/.$//;

    #my $min = $b->{2}->decode($min_b)+1;
    my $min = 0;

    dump [$min,$max];

    for(my $i=$min; $i<=$max; $i++){
        my $binary_middle = $b->{2}->encode($i);
        my $n = '1'.(sprintf("%0".($N-2)."d", $binary_middle)).'1';
        if(grep { $n eq $_ } @$blockers){
            say STDERR "Skypping $n!!!! -----------------";
            next;
        }
say STDERR 'Trying n: ',$n;
        my $isPrime = 0;
        my $factors = [];

        for my $base (2..10){
            my $n_b = $b->{$base}->decode($n);
            my $factor = firstFactor($n_b);
            if($factor){
                push @$factors, $factor;
print STDERR "\t$factor b $base";
            }
            else {
                $isPrime = 1;
                last;
            }
        }
        if(not $isPrime){
print STDERR "\n\tNOT PRIME! ($J left)";
            say "$n ".join(' ', @$factors);
            $J--;
        }
print STDERR "\n\n";
        if(!$J){ last; }
    }
}

sub firstFactor {
    my ($n) = @_;
    my $sqrt = sqrt($n);
    if($n < 4){
        return undef;
    }
    foreach my $f (2..$sqrt){
        return $f unless $n % $f;
    }
}


sub blockers {
    return [qw/
10000000000000000000000000010111
10000000000000000000000000010111
10000000000000000000000000110011
10000000000000000000000000110101
10000000000000000000000000111111
10000000000000000000000001110001
10000000000000000000000100000111
10000000000000000000000100100011
10000000000000000000000100110111
10000000000000000000000100111011
10000000000000000000000101000001
10000000000000000000000101010001
10000000000000000000000101011011
10000000000000000000000101100001
10000000000000000000000101110011
10000000000000000000000101111001
10000000000000000000000101111101
10000000000000000000000111010111

10000000000000000000000111100011
10000000000000000000001000110001
10000000000000000000001010010111
10000000000000000000010101101001
10000000000000000000010101111001
10000000000000000000101100000111
10000000000000000000101100001101
10000000000000000000101100101101
10000000000000000000101110001001
10000000000000000000101110010001
10000000000000000000101110111111
10000000000000000000110000101011
10000000000000000000001010011011
10000000000000000000001011001011
10000000000000000000001011111001
10000000000000000000001100000011
10000000000000000000001101001101
10000000000000000000001110010101
10000000000000000000001110100111
10000000000000000000001110110001
10000000000000000000010000001101
10000000000000000000010000100101
10000000000000000000010001011011
10000000000000000000010001101011
10000000000000000000010010101111
10000000000000000000010010111001
10000000000000000000010011001011
10000000000000000000010100001001
10000000000000000000010101110011
10000000000000000000010110110101
10000000000000000000010111100001
10000000000000000000011000011011
10000000000000000000011000011101
10000000000000000000011001000001
10000000000000000000011101011001
/];
}

__END__
